"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[161],{8431:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>u,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var n=t(4848),i=t(8453);const s={sidebar_position:3},o="Synopsis",a={id:"synopsis",title:"Synopsis",description:"If this synopsis confuses you, or you have any doubts, we recommend you visit the Getting Started page.",source:"@site/docs/synopsis.md",sourceDirName:".",slug:"/synopsis",permalink:"/gatekeeper/docs/synopsis",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Authenticating Users and Protecting Routes",permalink:"/gatekeeper/docs/step-by-step-guide/authenticating-users"},next:{title:"Providers",permalink:"/gatekeeper/docs/providers/"}},u={},c=[{value:"1. Initialize Gatekeeper",id:"1-initialize-gatekeeper",level:2},{value:"2. Create providers",id:"2-create-providers",level:2},{value:"3. Start using gatekeeper in your login and protected routes!",id:"3-start-using-gatekeeper-in-your-login-and-protected-routes",level:2},{value:"Login",id:"login",level:3},{value:"How to access the user once it has logged in?",id:"how-to-access-the-user-once-it-has-logged-in",level:3},{value:"Protecting routes",id:"protecting-routes",level:3},{value:"\u2714\ufe0f That&#39;s it! Now you application has a secure, easy-to-use, and flexible authentication system with Gatekeeper! \ud83d\udd10",id:"\ufe0f-thats-it-now-you-application-has-a-secure-easy-to-use-and-flexible-authentication-system-with-gatekeeper-",level:4}];function h(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"synopsis",children:"Synopsis"}),"\n",(0,n.jsxs)(r.p,{children:["If this synopsis confuses you, or you have any doubts, we recommend you visit the ",(0,n.jsx)(r.a,{href:"/gatekeeper/docs/step-by-step-guide/getting-started",children:"Getting Started"})," page."]}),"\n",(0,n.jsx)(r.h2,{id:"1-initialize-gatekeeper",children:"1. Initialize Gatekeeper"}),"\n",(0,n.jsx)(r.p,{children:"Initialize gatekeeper after your session module and provide a User Serializer and User Deserealizer"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",children:"import gatekeeper from '@sharifvelasquez/gatekeeper';\r\n// Initialize your session module (express-session, for example)\r\napp.use(session({ secret: 'I love Grothendieck Universes!' }));\r\n// Initialize Gatekeeper\r\napp.use(gatekeeper.initialize({\r\n    userSerializer: (user) => user.id,\r\n    userDeserializer: (id) => {\r\n        /* Here we are returning an arbitrary user\r\n        for the sake of the example */\r\n        return { id: id, username: 'David Hilbert' };\r\n    }\r\n}));\n"})}),"\n",(0,n.jsx)(r.h2,{id:"2-create-providers",children:"2. Create providers"}),"\n",(0,n.jsxs)(r.p,{children:["You can create your providers in the routes file, or can declare them in a separate file and import them in your routes (we will see how to use them in our routes in a second) -- this is the recommended approach. Here's an example (you can also visit our ",(0,n.jsx)(r.a,{href:"./providers",children:"Providers"})," page to know how to implement your favorite providers):"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",metastring:'title="authenticationProviders.js"',children:"import gatekeeper from '@sharifvelasquez/gatekeeper';\r\nimport GoogleProvider from '@sharifvelasquez/gatekeeper/providers/google';\r\nimport GithubProvider from '@sharifvelasquez/gatekeeper/providers/github';\r\n\r\nexport const GoogleAuth = new GoogleProvider({\r\n    clientId: '<YOUR CLIENT ID>',\r\n    clientSecret: '<YOUR CLIENT SECRET>'\r\n    // The OAuth2 callback/redirect url you registered\r\n    // (the URL in which this provider will be used)\r\n    callbackURL: 'https://yourdomainorlocalhost.com/auth/google'\r\n}, function handler(refresh_token, access_token, profile) => {\r\n    return profile;\r\n});\r\n\r\nexport const GithubAuth = new GithubProvider({\r\n    clientId: '<YOUR CLIENT ID>',\r\n    clientSecret: '<YOUR CLIENT SECRET>'\r\n    // The OAuth2 callback/redirect url you registered\r\n    // (the URL in which this provider will be used)\r\n    callbackURL: 'https://yourdomainorlocalhost.com/auth/github'\r\n}, function handler(refresh_token, access_token, profile) => {\r\n    return profile;\r\n});\r\n\r\n/* Notice that we can use the prebuilt providers as many times as we want\r\nto create multiple providers that do different things! */\r\nexport const GithubAuthWithSmileyFace = new GithubProvider({\r\n    clientId: '<YOUR CLIENT ID>',\r\n    clientSecret: '<YOUR CLIENT SECRET>'\r\n    // The OAuth2 callback/redirect url you registered\r\n    // (the URL in which this provider will be used)\r\n    callbackURL: 'https://yourdomainorlocalhost.com/auth/smiley/github'\r\n}, function handler(refresh_token, access_token, profile) => {\r\n    profile.name = profile.name + ' :D';\r\n    return profile;\r\n});\n"})}),"\n",(0,n.jsx)(r.h2,{id:"3-start-using-gatekeeper-in-your-login-and-protected-routes",children:"3. Start using gatekeeper in your login and protected routes!"}),"\n",(0,n.jsx)(r.h3,{id:"login",children:"Login"}),"\n",(0,n.jsxs)(r.p,{children:["For login routes (the route you want a user to visit when they want to log in to your application) use ",(0,n.jsx)(r.code,{children:"gatekeeper.authenticateWithProvider(theProviderYouWantToUse)"}),":"]}),"\n",(0,n.jsx)(r.admonition,{type:"warning",children:(0,n.jsxs)(r.p,{children:["Important: When using OAuth2 providers on login routes, make sure you use ",(0,n.jsx)(r.code,{children:"gatekeeper.authenticateWithProvider(yourProvider)"})," in a ",(0,n.jsx)(r.code,{children:"GET"})," route, as the user will be redirected to the provider's site to log in."]})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",children:"import gatekeeper from '@sharifvelasquez/gatekeeper';\r\nimport GithubProvider from '@sharifvelasquez/gatekeeper/providers/github';\r\n\r\nconst GithubAuth = new GithubProvider({\r\n    clientId: '<YOUR CLIENT ID>',\r\n    clientSecret: '<YOUR CLIENT SECRET>'\r\n    callbackURL: 'https://yourdomainorlocalhost.com/auth/github'\r\n}, function handler(refresh_token, access_token, profile) => {\r\n    return profile;\r\n});\r\n\r\nconst GithubAuthWithSmileyFace = new GithubProvider({\r\n    clientId: '<YOUR CLIENT ID>',\r\n    clientSecret: '<YOUR CLIENT SECRET>'\r\n    callbackURL: 'https://yourdomainorlocalhost.com/auth/smiley/github'\r\n}, function handler(refresh_token, access_token, profile) => {\r\n    profile.name = profile.name + ':D';\r\n    return profile;\r\n});\r\n\r\nrouter.get(\r\n    '/auth/smiley/github',\r\n    gatekeeper.authenticateWithProvider(GithubAuthWithSmileyFace),\r\n    (req, res) => {\r\n        return res.json({ user: req.session.user, success: true });\r\n    }\r\n);\r\n\r\nrouter.get(\r\n    '/auth/github',\r\n    gatekeeper.authenticateWithProvider(GithubAuth),\r\n    (req, res) => {\r\n        return res.json({ user: req.session.user, success: true });\r\n    }\r\n);\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Or if you have your providers in a different file (the recommended approach), say, ",(0,n.jsx)(r.code,{children:"authenticationProviders.js"}),","]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",metastring:'title="authenticationProviders.js"',children:"import { GithubAuth, GithubAuthWithSmileyFace } from './authenticationProviders'\r\n\r\nrouter.get(\r\n    '/auth/smiley/github',\r\n    gatekeeper.authenticateWithProvider(GithubAuthWithSmileyFace),\r\n    (req, res) => {\r\n        return res.json({ user: req.session.user, success: true });\r\n    }\r\n);\r\n\r\nrouter.get(\r\n    '/auth/github',\r\n    gatekeeper.authenticateWithProvider(GithubAuth),\r\n    (req, res) => {\r\n        return res.json({ user: req.session.user, success: true });\r\n    }\r\n);\n"})}),"\n",(0,n.jsx)(r.h3,{id:"how-to-access-the-user-once-it-has-logged-in",children:"How to access the user once it has logged in?"}),"\n",(0,n.jsxs)(r.p,{children:["Once the user has been authenticated, you can access it through ",(0,n.jsx)(r.code,{children:"req.session.user"}),"."]}),"\n",(0,n.jsx)(r.h3,{id:"protecting-routes",children:"Protecting routes"}),"\n",(0,n.jsxs)(r.p,{children:["To protect a route, you can call ",(0,n.jsx)(r.code,{children:"gatekeeper.protect"})," as a route middleware and pass to it a failure handler that specifies what to do in case the user is not authenticated (if you don't provide a failure handler, gatekeeper will just return a ",(0,n.jsx)(r.code,{children:"401"})," status code response). Let's see it in action:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",children:"router.get('/protected', gatekeeper.protect((req, res, next) => {\r\n\treturn res.redirect('/auth/google');\r\n}), (req, res) => res.send('The user', req.session.user.id, 'is authenticated!'));\n"})}),"\n",(0,n.jsx)(r.h4,{id:"\ufe0f-thats-it-now-you-application-has-a-secure-easy-to-use-and-flexible-authentication-system-with-gatekeeper-",children:"\u2714\ufe0f That's it! Now you application has a secure, easy-to-use, and flexible authentication system with Gatekeeper! \ud83d\udd10"}),"\n",(0,n.jsxs)(r.p,{children:["We now recommend you visit our ",(0,n.jsx)(r.a,{href:"./providers",children:"Providers"})," page to learn how to implement your favorite providers."]})]})}function l(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>o,x:()=>a});var n=t(6540);const i={},s=n.createContext(i);function o(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);